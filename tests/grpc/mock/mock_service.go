// Code generated by MockGen. DO NOT EDIT.
// Source: v1beta1/service.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/AliyunContainerService/ack-kms-plugin/v1beta1"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockKeyManagementServiceClient is a mock of KeyManagementServiceClient interface
type MockKeyManagementServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagementServiceClientMockRecorder
}

// MockKeyManagementServiceClientMockRecorder is the mock recorder for MockKeyManagementServiceClient
type MockKeyManagementServiceClientMockRecorder struct {
	mock *MockKeyManagementServiceClient
}

// NewMockKeyManagementServiceClient creates a new mock instance
func NewMockKeyManagementServiceClient(ctrl *gomock.Controller) *MockKeyManagementServiceClient {
	mock := &MockKeyManagementServiceClient{ctrl: ctrl}
	mock.recorder = &MockKeyManagementServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManagementServiceClient) EXPECT() *MockKeyManagementServiceClientMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockKeyManagementServiceClient) Version(ctx context.Context, in *v1beta1.VersionRequest, opts ...grpc.CallOption) (*v1beta1.VersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Version", varargs...)
	ret0, _ := ret[0].(*v1beta1.VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version
func (mr *MockKeyManagementServiceClientMockRecorder) Version(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKeyManagementServiceClient)(nil).Version), varargs...)
}

// Decrypt mocks base method
func (m *MockKeyManagementServiceClient) Decrypt(ctx context.Context, in *v1beta1.DecryptRequest, opts ...grpc.CallOption) (*v1beta1.DecryptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decrypt", varargs...)
	ret0, _ := ret[0].(*v1beta1.DecryptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockKeyManagementServiceClientMockRecorder) Decrypt(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKeyManagementServiceClient)(nil).Decrypt), varargs...)
}

// Encrypt mocks base method
func (m *MockKeyManagementServiceClient) Encrypt(ctx context.Context, in *v1beta1.EncryptRequest, opts ...grpc.CallOption) (*v1beta1.EncryptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Encrypt", varargs...)
	ret0, _ := ret[0].(*v1beta1.EncryptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockKeyManagementServiceClientMockRecorder) Encrypt(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockKeyManagementServiceClient)(nil).Encrypt), varargs...)
}

// MockKeyManagementServiceServer is a mock of KeyManagementServiceServer interface
type MockKeyManagementServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagementServiceServerMockRecorder
}

// MockKeyManagementServiceServerMockRecorder is the mock recorder for MockKeyManagementServiceServer
type MockKeyManagementServiceServerMockRecorder struct {
	mock *MockKeyManagementServiceServer
}

// NewMockKeyManagementServiceServer creates a new mock instance
func NewMockKeyManagementServiceServer(ctrl *gomock.Controller) *MockKeyManagementServiceServer {
	mock := &MockKeyManagementServiceServer{ctrl: ctrl}
	mock.recorder = &MockKeyManagementServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManagementServiceServer) EXPECT() *MockKeyManagementServiceServerMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockKeyManagementServiceServer) Version(arg0 context.Context, arg1 *v1beta1.VersionRequest) (*v1beta1.VersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1)
	ret0, _ := ret[0].(*v1beta1.VersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version
func (mr *MockKeyManagementServiceServerMockRecorder) Version(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKeyManagementServiceServer)(nil).Version), arg0, arg1)
}

// Decrypt mocks base method
func (m *MockKeyManagementServiceServer) Decrypt(arg0 context.Context, arg1 *v1beta1.DecryptRequest) (*v1beta1.DecryptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1)
	ret0, _ := ret[0].(*v1beta1.DecryptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockKeyManagementServiceServerMockRecorder) Decrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKeyManagementServiceServer)(nil).Decrypt), arg0, arg1)
}

// Encrypt mocks base method
func (m *MockKeyManagementServiceServer) Encrypt(arg0 context.Context, arg1 *v1beta1.EncryptRequest) (*v1beta1.EncryptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0, arg1)
	ret0, _ := ret[0].(*v1beta1.EncryptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockKeyManagementServiceServerMockRecorder) Encrypt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockKeyManagementServiceServer)(nil).Encrypt), arg0, arg1)
}
